"""
Run Freesurfer/MNE anatomical pipeline
======================================

This runs Freesurfer recon-all on all subjects and computes the BEM surfaces
later used for forward modeling. BEM extraction is done using flash MRI data.

Make sure that Freesurfer is properly configured before running this script.
See the `Setup & Configuration`_ section of the Freesurfer manual.

.. _Setup & Configuration: https://surfer.nmr.mgh.harvard.edu/fswiki/DownloadAndInstall#Setup.26Configuration
"""
import os
import glob
import shutil

from mne.bem import make_flash_bem, convert_flash_mris
from mne.parallel import parallel_func
import nibabel as nib

from library.config import study_path, subjects_dir, N_JOBS


def process_subject_anat(subject_id):
    subject = "sub%03d" % subject_id
    print("processing %s" % subject)

    # error_log = "%s/%s/scripts/IsRunning.lh+rh" % (subjects_dir, subject)
    # if os.path.exists(error_log):
    #     print("removing %s" % error_log)
    #     os.remove(error_log)

    t1_fname = "%s/ds117/%s/anatomy/highres001.nii.gz" % (study_path, subject)
    log_fname = "%s/ds117/%s/my-recon-all.txt" % (study_path, subject)
    !recon-all -all -s $subject -sd $subjects_dir -i $t1_fname | tee $log_fname

    # Move flash data
    fnames = glob.glob("%s/ds117/%s/anatomy/FLASH/meflash*" % (study_path, subject))
    dst_flash = "%s/%s/mri/flash" % (subjects_dir, subject)
    if not os.path.isdir(dst_flash):
        os.makedirs(dst_flash)

    for f_src in fnames:
        f_dst = os.path.basename(f_src).replace("meflash_", "mef")
        f_dst = os.path.join(dst_flash, f_dst)
        shutil.copy(f_src, f_dst)

    # Fix the headers for subject 19
    if subject_id == 19:
        fnames = (['mef05_%d.mgz' % x for x in range(7)] +
                  ['mef30_%d.mgz' % x for x in range(7)])
        for fname in fnames:
            dest_fname = os.path.join(dst_flash, fname)
            dest_img = nib.load(dest_fname)
            print("Fixing %s" % dest_fname)

            # Copy the headers from subjects 1
            src_img = nib.load(os.path.join(subjects_dir, "sub001", "mri", "flash", fname))
            hdr = src_img.header
            fixed = nib.MGHImage(dest_img.get_data(), dest_img.affine, hdr)
            nib.save(fixed, dest_fname)

    # Make flash BEM
    convert_flash_mris(subject, flash30=True, convert=False, unwarp=False,
                       subjects_dir=subjects_dir)
    make_flash_bem(subject=subject, subjects_dir=subjects_dir,
                   overwrite=True, show=False)


parallel, run_func, _ = parallel_func(process_subject_anat, n_jobs=N_JOBS)
parallel(run_func(subject_id) for subject_id in range(1, 20))
